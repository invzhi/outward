syntax = "proto3";

package outward.v1;

import "google/api/annotations.proto";

option go_package = "outward/v1";

service IssueService {
  rpc GetIssue(GetIssueRequest) returns (Issue) {
    option (google.api.http) = {
      get: "/v1/issues"
    };
//    option (google.api.http) = {get: "/v1/{name=projects/*/issues/*}"};
//    option (google.api.method_signature) = "name";
//    option (bytebase.v1.permission) = "bb.issues.get";
//    option (bytebase.v1.auth_method) = CUSTOM;
  }

  //  rpc CreateIssue(CreateIssueRequest) returns (Issue) {
  //    option (google.api.http) = {
  //      post: "/v1/{parent=projects/*}/issues"
  //      body: "issue"
  //    };
  //    option (google.api.method_signature) = "parent,issue";
  //    // XXX: issues.action needs respective plans.action and rollouts.action permissions if the issue type is change database.
  //    option (bytebase.v1.permission) = "bb.issues.create";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  rpc ListIssues(ListIssuesRequest) returns (ListIssuesResponse) {
  //    option (google.api.http) = {get: "/v1/{parent=projects/*}/issues"};
  //    option (google.api.method_signature) = "parent";
  //    option (bytebase.v1.permission) = "bb.issues.list";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  // Search for issues that the caller has the bb.issues.get permission on and also satisfy the specified filter & query.
  //  rpc SearchIssues(SearchIssuesRequest) returns (SearchIssuesResponse) {
  //    option (google.api.http) = {get: "/v1/{parent=projects/*}/issues:search"};
  //    // TODO(d): secure it.
  //    option (bytebase.v1.permission) = "bb.issues.get";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  rpc UpdateIssue(UpdateIssueRequest) returns (Issue) {
  //    option (google.api.http) = {
  //      patch: "/v1/{issue.name=projects/*/issues/*}"
  //      body: "issue"
  //    };
  //    option (google.api.method_signature) = "issue,update_mask";
  //    option (bytebase.v1.permission) = "bb.issues.update";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  rpc ListIssueComments(ListIssueCommentsRequest) returns (ListIssueCommentsResponse) {
  //    option (google.api.http) = {get: "/v1/{parent=projects/*/issues/*}/issueComments"};
  //    option (google.api.method_signature) = "parent";
  //    option (bytebase.v1.permission) = "bb.issueComments.list";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  rpc CreateIssueComment(CreateIssueCommentRequest) returns (IssueComment) {
  //    option (google.api.http) = {
  //      post: "/v1/{parent=projects/*/issues/*}:comment"
  //      body: "issue_comment"
  //    };
  //    option (google.api.method_signature) = "parent,issue_comment";
  //    option (bytebase.v1.permission) = "bb.issueComments.create";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  rpc UpdateIssueComment(UpdateIssueCommentRequest) returns (IssueComment) {
  //    option (google.api.http) = {
  //      patch: "/v1/{parent=projects/*/issues/*}:comment"
  //      body: "issue_comment"
  //    };
  //    option (google.api.method_signature) = "parent,issue_comment,update_mask";
  //    option (bytebase.v1.permission) = "bb.issueComments.update";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  rpc BatchUpdateIssuesStatus(BatchUpdateIssuesStatusRequest) returns (BatchUpdateIssuesStatusResponse) {
  //    option (google.api.http) = {
  //      post: "/v1/{parent=projects/*}/issues:batchUpdateStatus"
  //      body: "*"
  //    };
  //    option (bytebase.v1.permission) = "bb.issues.update";
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //  }
  //
  //  rpc ApproveIssue(ApproveIssueRequest) returns (Issue) {
  //    option (google.api.http) = {
  //      post: "/v1/{name=projects/*/issues/*}:approve"
  //      body: "*"
  //    };
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //    // TODO(d): secure it. Controlled by org policy.
  //  }
  //
  //  rpc RejectIssue(RejectIssueRequest) returns (Issue) {
  //    option (google.api.http) = {
  //      post: "/v1/{name=projects/*/issues/*}:reject"
  //      body: "*"
  //    };
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //    // TODO(d): secure it. Controlled by org policy.
  //  }
  //
  //  rpc RequestIssue(RequestIssueRequest) returns (Issue) {
  //    option (google.api.http) = {
  //      post: "/v1/{name=projects/*/issues/*}:request"
  //      body: "*"
  //    };
  //    option (bytebase.v1.auth_method) = CUSTOM;
  //    // TODO(d): secure it. Controlled by org policy.
  //  }
}

message GetIssueRequest {
  // The name of the issue to retrieve.
  // Format: projects/{project}/issues/{issue}
  string name = 1;

  bool force = 2;
}

message Issue {
  string name = 1;
}
