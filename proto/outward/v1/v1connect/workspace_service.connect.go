// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: outward/v1/workspace_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/invzhi/outward/proto/outward/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "outward.v1.WorkspaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkspaceServiceCreateWorkspaceProcedure is the fully-qualified name of the WorkspaceService's
	// CreateWorkspace RPC.
	WorkspaceServiceCreateWorkspaceProcedure = "/outward.v1.WorkspaceService/CreateWorkspace"
	// WorkspaceServiceGetWorkspaceListProcedure is the fully-qualified name of the WorkspaceService's
	// GetWorkspaceList RPC.
	WorkspaceServiceGetWorkspaceListProcedure = "/outward.v1.WorkspaceService/GetWorkspaceList"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	workspaceServiceServiceDescriptor                = v1.File_outward_v1_workspace_service_proto.Services().ByName("WorkspaceService")
	workspaceServiceCreateWorkspaceMethodDescriptor  = workspaceServiceServiceDescriptor.Methods().ByName("CreateWorkspace")
	workspaceServiceGetWorkspaceListMethodDescriptor = workspaceServiceServiceDescriptor.Methods().ByName("GetWorkspaceList")
)

// WorkspaceServiceClient is a client for the outward.v1.WorkspaceService service.
type WorkspaceServiceClient interface {
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	GetWorkspaceList(context.Context, *connect.Request[v1.GetWorkspaceListRequest]) (*connect.Response[v1.GetWorkspaceListResponse], error)
}

// NewWorkspaceServiceClient constructs a client for the outward.v1.WorkspaceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workspaceServiceClient{
		createWorkspace: connect.NewClient[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse](
			httpClient,
			baseURL+WorkspaceServiceCreateWorkspaceProcedure,
			connect.WithSchema(workspaceServiceCreateWorkspaceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWorkspaceList: connect.NewClient[v1.GetWorkspaceListRequest, v1.GetWorkspaceListResponse](
			httpClient,
			baseURL+WorkspaceServiceGetWorkspaceListProcedure,
			connect.WithSchema(workspaceServiceGetWorkspaceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	createWorkspace  *connect.Client[v1.CreateWorkspaceRequest, v1.CreateWorkspaceResponse]
	getWorkspaceList *connect.Client[v1.GetWorkspaceListRequest, v1.GetWorkspaceListResponse]
}

// CreateWorkspace calls outward.v1.WorkspaceService.CreateWorkspace.
func (c *workspaceServiceClient) CreateWorkspace(ctx context.Context, req *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return c.createWorkspace.CallUnary(ctx, req)
}

// GetWorkspaceList calls outward.v1.WorkspaceService.GetWorkspaceList.
func (c *workspaceServiceClient) GetWorkspaceList(ctx context.Context, req *connect.Request[v1.GetWorkspaceListRequest]) (*connect.Response[v1.GetWorkspaceListResponse], error) {
	return c.getWorkspaceList.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the outward.v1.WorkspaceService service.
type WorkspaceServiceHandler interface {
	CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error)
	GetWorkspaceList(context.Context, *connect.Request[v1.GetWorkspaceListRequest]) (*connect.Response[v1.GetWorkspaceListResponse], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workspaceServiceCreateWorkspaceHandler := connect.NewUnaryHandler(
		WorkspaceServiceCreateWorkspaceProcedure,
		svc.CreateWorkspace,
		connect.WithSchema(workspaceServiceCreateWorkspaceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetWorkspaceListHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetWorkspaceListProcedure,
		svc.GetWorkspaceList,
		connect.WithSchema(workspaceServiceGetWorkspaceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/outward.v1.WorkspaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkspaceServiceCreateWorkspaceProcedure:
			workspaceServiceCreateWorkspaceHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetWorkspaceListProcedure:
			workspaceServiceGetWorkspaceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) CreateWorkspace(context.Context, *connect.Request[v1.CreateWorkspaceRequest]) (*connect.Response[v1.CreateWorkspaceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("outward.v1.WorkspaceService.CreateWorkspace is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetWorkspaceList(context.Context, *connect.Request[v1.GetWorkspaceListRequest]) (*connect.Response[v1.GetWorkspaceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("outward.v1.WorkspaceService.GetWorkspaceList is not implemented"))
}
