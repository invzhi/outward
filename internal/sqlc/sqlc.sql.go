// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sqlc.sql

package sqlc

import (
	"context"

	"github.com/invzhi/outward/internal/id"
)

const createCheckIn = `-- name: CreateCheckIn :one
INSERT INTO "check_in" (id, workspace_id, slack_channel, question, schedule)
VALUES ($1, $2, $3, $4, $5) RETURNING id, workspace_id, created_at, slack_channel, question, schedule
`

type CreateCheckInParams struct {
	ID           id.ID
	WorkspaceID  id.ID
	SlackChannel string
	Question     string
	Schedule     []byte
}

func (q *Queries) CreateCheckIn(ctx context.Context, arg CreateCheckInParams) (CheckIn, error) {
	row := q.db.QueryRow(ctx, createCheckIn,
		arg.ID,
		arg.WorkspaceID,
		arg.SlackChannel,
		arg.Question,
		arg.Schedule,
	)
	var i CheckIn
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CreatedAt,
		&i.SlackChannel,
		&i.Question,
		&i.Schedule,
	)
	return i, err
}

const createCheckInAnswer = `-- name: CreateCheckInAnswer :one
INSERT INTO "check_in_answer" (id, workspace_id, check_in_id, user_id, answer)
VALUES ($1, $2, $3, $4, $5) RETURNING id, workspace_id, check_in_id, user_id, created_at, answer
`

type CreateCheckInAnswerParams struct {
	ID          id.ID
	WorkspaceID id.ID
	CheckInID   id.ID
	UserID      id.ID
	Answer      string
}

func (q *Queries) CreateCheckInAnswer(ctx context.Context, arg CreateCheckInAnswerParams) (CheckInAnswer, error) {
	row := q.db.QueryRow(ctx, createCheckInAnswer,
		arg.ID,
		arg.WorkspaceID,
		arg.CheckInID,
		arg.UserID,
		arg.Answer,
	)
	var i CheckInAnswer
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.CheckInID,
		&i.UserID,
		&i.CreatedAt,
		&i.Answer,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (id, slack_id)
VALUES ($1, $2) RETURNING id, created_at, slack_id
`

type CreateUserParams struct {
	ID      id.ID
	SlackID string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.SlackID)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.SlackID)
	return i, err
}

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO "workspace" (id, slack_id)
VALUES ($1, $2) ON CONFLICT DO NOTHING RETURNING id, created_at, slack_id
`

type CreateWorkspaceParams struct {
	ID      id.ID
	SlackID string
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace, arg.ID, arg.SlackID)
	var i Workspace
	err := row.Scan(&i.ID, &i.CreatedAt, &i.SlackID)
	return i, err
}

const createWorkspaceMember = `-- name: CreateWorkspaceMember :exec
INSERT INTO "workspace_member" (workspace_id, user_id)
VALUES ($1, $2)
`

type CreateWorkspaceMemberParams struct {
	WorkspaceID id.ID
	UserID      id.ID
}

func (q *Queries) CreateWorkspaceMember(ctx context.Context, arg CreateWorkspaceMemberParams) error {
	_, err := q.db.Exec(ctx, createWorkspaceMember, arg.WorkspaceID, arg.UserID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, slack_id
FROM "user"
WHERE slack_id = $1
`

func (q *Queries) GetUser(ctx context.Context, slackID string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, slackID)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.SlackID)
	return i, err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT id, created_at, slack_id
FROM "workspace"
WHERE slack_id = $1
`

func (q *Queries) GetWorkspace(ctx context.Context, slackID string) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspace, slackID)
	var i Workspace
	err := row.Scan(&i.ID, &i.CreatedAt, &i.SlackID)
	return i, err
}

const getWorkspaceMembers = `-- name: GetWorkspaceMembers :many
SELECT "user".id, "user".created_at, "user".slack_id
FROM "user"
         JOIN "workspace_member" ON "user".id = workspace_member.user_id
WHERE workspace_member.workspace_id = $1
ORDER BY "user".id DESC LIMIT $2
`

type GetWorkspaceMembersParams struct {
	WorkspaceID id.ID
	Limit       int32
}

func (q *Queries) GetWorkspaceMembers(ctx context.Context, arg GetWorkspaceMembersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getWorkspaceMembers, arg.WorkspaceID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.SlackID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkspaceMembersC = `-- name: GetWorkspaceMembersC :many
SELECT "user".id, "user".created_at, "user".slack_id
FROM "user"
         JOIN "workspace_member" ON "user".id = workspace_member.user_id
WHERE workspace_member.workspace_id = $2
  AND "user".id < $3
ORDER BY "user".id DESC LIMIT $1
`

type GetWorkspaceMembersCParams struct {
	Limit       int32
	WorkspaceID id.ID
	Cursor      id.ID
}

func (q *Queries) GetWorkspaceMembersC(ctx context.Context, arg GetWorkspaceMembersCParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getWorkspaceMembersC, arg.Limit, arg.WorkspaceID, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.SlackID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
