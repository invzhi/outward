// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file outward/v1/workspace_service.proto (package outward.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum outward.v1.WorkspaceRegion
 */
export enum WorkspaceRegion {
  /**
   * @generated from enum value: WORKSPACE_REGION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: WORKSPACE_REGION_SINGAPORE = 1;
   */
  SINGAPORE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(WorkspaceRegion)
proto3.util.setEnumType(WorkspaceRegion, "outward.v1.WorkspaceRegion", [
  { no: 0, name: "WORKSPACE_REGION_UNSPECIFIED" },
  { no: 1, name: "WORKSPACE_REGION_SINGAPORE" },
]);

/**
 * @generated from message outward.v1.Workspace
 */
export class Workspace extends Message<Workspace> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: outward.v1.WorkspaceRegion region = 3;
   */
  region = WorkspaceRegion.UNSPECIFIED;

  constructor(data?: PartialMessage<Workspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "outward.v1.Workspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "region", kind: "enum", T: proto3.getEnumType(WorkspaceRegion) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace {
    return new Workspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace {
    return new Workspace().fromJsonString(jsonString, options);
  }

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean {
    return proto3.util.equals(Workspace, a, b);
  }
}

/**
 * @generated from message outward.v1.CreateWorkspaceRequest
 */
export class CreateWorkspaceRequest extends Message<CreateWorkspaceRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: outward.v1.WorkspaceRegion region = 2;
   */
  region = WorkspaceRegion.UNSPECIFIED;

  constructor(data?: PartialMessage<CreateWorkspaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "outward.v1.CreateWorkspaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "region", kind: "enum", T: proto3.getEnumType(WorkspaceRegion) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceRequest {
    return new CreateWorkspaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceRequest | PlainMessage<CreateWorkspaceRequest> | undefined, b: CreateWorkspaceRequest | PlainMessage<CreateWorkspaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceRequest, a, b);
  }
}

/**
 * @generated from message outward.v1.CreateWorkspaceResponse
 */
export class CreateWorkspaceResponse extends Message<CreateWorkspaceResponse> {
  /**
   * @generated from field: outward.v1.Workspace workspace = 1;
   */
  workspace?: Workspace;

  constructor(data?: PartialMessage<CreateWorkspaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "outward.v1.CreateWorkspaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspace", kind: "message", T: Workspace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkspaceResponse {
    return new CreateWorkspaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkspaceResponse | PlainMessage<CreateWorkspaceResponse> | undefined, b: CreateWorkspaceResponse | PlainMessage<CreateWorkspaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateWorkspaceResponse, a, b);
  }
}

/**
 * @generated from message outward.v1.GetWorkspaceListRequest
 */
export class GetWorkspaceListRequest extends Message<GetWorkspaceListRequest> {
  constructor(data?: PartialMessage<GetWorkspaceListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "outward.v1.GetWorkspaceListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceListRequest {
    return new GetWorkspaceListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceListRequest {
    return new GetWorkspaceListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceListRequest {
    return new GetWorkspaceListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceListRequest | PlainMessage<GetWorkspaceListRequest> | undefined, b: GetWorkspaceListRequest | PlainMessage<GetWorkspaceListRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceListRequest, a, b);
  }
}

/**
 * @generated from message outward.v1.GetWorkspaceListResponse
 */
export class GetWorkspaceListResponse extends Message<GetWorkspaceListResponse> {
  /**
   * @generated from field: repeated outward.v1.Workspace workspaces = 1;
   */
  workspaces: Workspace[] = [];

  constructor(data?: PartialMessage<GetWorkspaceListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "outward.v1.GetWorkspaceListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workspaces", kind: "message", T: Workspace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceListResponse {
    return new GetWorkspaceListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceListResponse {
    return new GetWorkspaceListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceListResponse {
    return new GetWorkspaceListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkspaceListResponse | PlainMessage<GetWorkspaceListResponse> | undefined, b: GetWorkspaceListResponse | PlainMessage<GetWorkspaceListResponse> | undefined): boolean {
    return proto3.util.equals(GetWorkspaceListResponse, a, b);
  }
}

